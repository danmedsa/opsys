Graham Greving
CMPS111: OS - Homework 4
March 13, 2014

#3, 7, 8, 9, 24 from Chapter 9 and Exercises A, B

3. Secret-key cryptography is more efficient than public-key cryptography, but requires
the sender and receiver to agree on a key in advance. Suppose that the sender and re­
ceiver have never met, but there exists a trusted third party that shares a secret key
with the sender and also shares a (different) secret key with the receiver. How can the
sender and receiver establish a new shared secret key under these circumstances?

Sender->Bob
Receiver->Alice
Trusted->Jim
Bob sends random key to Jim (encrypted with key(bob,jim)), Jim decrypts it, recrypts it with key(alice,jim), sends to alice. Now Bob and Alice have a shared key.

7. Two different protection mechanisms that we have discussed are capabilities and ac­cess control lists. For each of the following protection problems, tell which of these
mechanisms can be used.
(a) Ken wants his files readable by everyone except his office mate.
ACL can only be used.
(b) Mitch and Steve want to share some secret files.
ACL or capabilities can be used.
(c) Linda wants some of her files to be public.
ACL is easiest.

8. Represent the ownerships and permissions shown in this UNIX directory listing as a
protection matrix. Note: asw is a member of two groups: users and devel; gmw is a
member only of users. Treat each of the two users and two groups as a domain, so
that the matrix has four rows (one per domain) and four columns (one per file).

-rw-r--r-- 2 gmw users 908   May 16 16:45  PPP-Notes
-rwxr-xr-x 1 asw devel 432   May 1 3 12:35 prog1
-rw-rw---- 1 asw users 50094 May 30 17:51  project.t
-rw-r----- 1 asw devel 13124 May 31 14:30  splash.gif

Domain	PPP-Notes 	prog1	project.t	splash.gif
asw	r		rwx	rw		rw		
gmw	rw			rw
users	r			rw
devel			rx			r


9. Express the permissions shown in the directory listing of the previous problem as ac­
cess control lists.
PPP-Notes 	gmw:rw;*:r
prog1 		asw:rwx;devel:rx;*:r
project.t 	asw:rw;users:rw
splash.gif	asw:rw;devel:r

24. What property does the implementation of passwords in UNIX have in common with
Lamport 's scheme for logging in over an insecure network?
UNIX and Lamport’s scheme use one-way functions.

A. An RSA (Rivest-Shamir-Adelman) cryptosystem is composed of e, d, n = pq and where
d×e ≡ 1 mod φ(n). Construct a simple RSA cipher using these parameters: p = 3, q = 5, e = 11,
and d = 3. The public key is e, the private key is d, n is also public but p, q and φ(n) are
private.
(a) n = 15 and φ(n) = 8.
(b) If the adversary knows φ(n) then it is trivial to compute d (private key).
(c) The formula for E(m) = c=m^e (mod n) and for D(c) = m=c^d (mod n).
(d) Why is it safe for n to be made public?
Factoring very large numbers is significantly harder for computers to do than multiplying large numbers.

B. A Diffie-Helman key exchange requires a base a, and a prime p. A must choose an x and B
must choose a y. It then proceeds as follows:

A → B : a, p, a^x(mod p)
B → A : a^y(mod p)

(a) What secret do A and B now share?
x*y
(b) Why doesn’t the adversary also know this secret?
because a and p are secret
(c) What would be necessary for the adversary to learn this secret?
figure out a and p
